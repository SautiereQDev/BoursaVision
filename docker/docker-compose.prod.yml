version: "3.8"

services:
  # PostgreSQL Database with TimescaleDB
  postgres:
    image: timescale/timescaledb:latest-pg15
    container_name: boursa-postgres-prod
    restart: unless-stopped
    environment:
      - POSTGRES_DB=boursa_vision
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/backups
    networks:
      - boursa-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d boursa_vision"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: boursa-redis-prod
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 1g --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    networks:
      - boursa-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API (Production)
  backend:
    build:
      context: ../backend
      dockerfile: ../docker/Dockerfile.backend
      target: production
    container_name: boursa-backend-prod
    restart: unless-stopped
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/boursa_vision
      - REDIS_URL=redis://redis:6379/0
      - ENVIRONMENT=production
      - LOG_LEVEL=INFO
      - SECRET_KEY=${SECRET_KEY}
      - ACCESS_TOKEN_EXPIRE_MINUTES=${ACCESS_TOKEN_EXPIRE_MINUTES:-1440}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS}
      - CORS_ORIGINS=${CORS_ORIGINS}
    volumes:
      - backend_logs:/app/logs
    networks:
      - boursa-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 60s
      timeout: 10s
      retries: 3

  # Frontend PWA (Production)
  frontend:
    build:
      context: ../frontend
      dockerfile: ../docker/Dockerfile.frontend
      target: production
      args:
        - VITE_API_BASE_URL=${VITE_API_BASE_URL}
        - VITE_WS_URL=${VITE_WS_URL}
    container_name: boursa-frontend-prod
    restart: unless-stopped
    networks:
      - boursa-network

  # Celery Worker (Production)
  celery-worker:
    build:
      context: ../backend
      dockerfile: ../docker/Dockerfile.backend
      target: production
    container_name: boursa-celery-worker-prod
    restart: unless-stopped
    command: poetry run celery -A src.infrastructure.background.celery_app worker --loglevel=info --concurrency=4
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/boursa_vision
      - REDIS_URL=redis://redis:6379/0
      - ENVIRONMENT=production
      - LOG_LEVEL=INFO
    volumes:
      - backend_logs:/app/logs
    networks:
      - boursa-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

  # Celery Beat (Production)
  celery-beat:
    build:
      context: ../backend
      dockerfile: ../docker/Dockerfile.backend
      target: production
    container_name: boursa-celery-beat-prod
    restart: unless-stopped
    command: poetry run celery -A src.infrastructure.background.celery_app beat --loglevel=info
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/boursa_vision
      - REDIS_URL=redis://redis:6379/0
      - ENVIRONMENT=production
      - LOG_LEVEL=INFO
    volumes:
      - backend_logs:/app/logs
    networks:
      - boursa-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

  # Nginx Reverse Proxy with SSL
  nginx:
    image: nginx:alpine
    container_name: boursa-nginx-prod
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ../nginx/nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    networks:
      - boursa-network
    depends_on:
      - backend
      - frontend

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  backend_logs:
    driver: local
  nginx_logs:
    driver: local

networks:
  boursa-network:
    driver: bridge
