# Backend Dockerfile - Multi-stage build for production
FROM python:3.11-slim AS base

# Set environment variables
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1

# Install system dependencies and Poetry
RUN apt-get update && apt-get install -y \
    curl \
    g++ \
    gcc \
    libpq-dev \
    && rm -rf /var/lib/apt/lists/* \
    && pip install poetry

# Configure Poetry
ENV POETRY_NO_INTERACTION=1 \
    POETRY_VENV_IN_PROJECT=1 \
    POETRY_CACHE_DIR=/tmp/poetry_cache \
    VIRTUAL_ENV=/app/.venv \
    PATH="/app/.venv/bin:$PATH"

WORKDIR /app

# Copy Poetry files
COPY pyproject.toml poetry.lock ./

# Development stage
FROM base AS development

# Copy source code first
COPY . .

# Create non-root user with specific home directory
RUN groupadd -r appuser && useradd -r -g appuser -m -d /home/appuser appuser

# Set proper ownership and permissions
RUN mkdir -p /tmp/poetry_cache /app/.venv /home/appuser && \
    chown -R appuser:appuser /app /tmp/poetry_cache /home/appuser /app/.venv && \
    chmod -R 755 /home/appuser && \
    chmod -R 755 /app

# Switch to appuser before installing dependencies
USER appuser

# Set environment variables for Poetry
ENV POETRY_CACHE_DIR=/tmp/poetry_cache \
    POETRY_VENV_IN_PROJECT=1 \
    POETRY_NO_INTERACTION=1

# Install dependencies (including dev dependencies) without installing package
RUN poetry config virtualenvs.in-project true && \
    poetry config virtualenvs.create true && \
    poetry config cache-dir /tmp/poetry_cache && \
    poetry install --with dev --no-root --no-cache && \
    poetry env info

# Switch back to root to create startup script
USER root

# Create startup script for production API with real data
RUN echo '#!/bin/bash\n\
echo "ðŸ§ª Starting Simple Test API to check dependencies..."\n\
cd /app\n\
exec poetry run python src/simple_test_api.py' > /app/start_test_api.sh && \
    chmod +x /app/start_test_api.sh && \
    chown appuser:appuser /app/start_test_api.sh

# Switch back to appuser
USER appuser

EXPOSE 8000

# Environment variables for API configuration
ENV BOURSA_API_VERSION=advanced \
    API_HOST=0.0.0.0 \
    API_PORT=8000 \
    API_RELOAD=true \
    API_MODE=standard \
    ENVIRONMENT=development

# Use our test startup script
CMD ["/app/start_test_api.sh"]

# Production stage
FROM base AS production

# Copy source code
COPY src ./src
COPY alembic.ini ./

# Install only production dependencies without installing package
RUN poetry config virtualenvs.in-project true && \
    poetry install --only=main --no-root && \
    rm -rf "$POETRY_CACHE_DIR"

# Create non-root user
RUN groupadd -r appuser && useradd -r -g appuser appuser && chown -R appuser:appuser /app
USER appuser

EXPOSE 8000

# Health check
HEALTHCHECK --interval=30s --timeout=30s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8000/health || exit 1

CMD ["poetry", "run", "uvicorn", "src.infrastructure.web.main:app", "--host", "0.0.0.0", "--port", "8000", "--workers", "4"]
