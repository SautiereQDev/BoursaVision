version: "3.8"

services:
  # PostgreSQL Database with TimescaleDB
  postgres:
    image: timescale/timescaledb:latest-pg17
    container_name: boursa-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      # Clean initialization script (production tables only)
      - ./scripts/init-clean-production-db.sh:/docker-entrypoint-initdb.d/init-db.sh:ro
    networks:
      - boursa-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7.6-alpine
    container_name: boursa-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - boursa-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru

  # Backend API with Hot Reload
  backend:
    build:
      context: ../backend
      dockerfile: ../docker/Dockerfile.backend
      target: development
    container_name: boursa-backend
    environment:
      # Development configuration
      - ENVIRONMENT=development
      - LOG_LEVEL=DEBUG
      - API_HOST=0.0.0.0
      - API_PORT=${API_PORT:-8000}
      - API_RELOAD=true
      
      # Python path configuration
      - PYTHONPATH=/app/src
      
      # YFinance configuration
      - ENABLED_MARKET_INDICES=${ENABLED_MARKET_INDICES:-cac40,nasdaq100,ftse100}
      - YFINANCE_REQUEST_DELAY=${YFINANCE_REQUEST_DELAY:-0.2}
      - YFINANCE_TIMEOUT=${YFINANCE_TIMEOUT:-10}
      - MAX_CONCURRENT_REQUESTS=${MAX_CONCURRENT_REQUESTS:-5}
      
      # Poetry configuration
      - POETRY_VENV_IN_PROJECT=true
      - POETRY_NO_INTERACTION=1
      - POETRY_CACHE_DIR=/tmp/poetry_cache
      
      # Database configuration
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - REDIS_URL=redis://redis:6379/0
    ports:
      - "${API_PORT:-8000}:${API_PORT:-8000}"
    volumes:
      # Hot reload: mount source code
      - ../backend/src:/app/src:cached
      - ../backend/main.py:/app/main.py:cached
      - ../backend/alembic.ini:/app/alembic.ini:cached
      - ../backend/alembic:/app/alembic:cached
      - ../backend/pyproject.toml:/app/pyproject.toml:cached
      - ../backend/poetry.lock:/app/poetry.lock:cached
      - ../backend/market_archiver.py:/app/market_archiver.py:cached
      
      # Named volumes for persistence
      - backend_logs:/app/logs
      - poetry_cache:/tmp/poetry_cache
    networks:
      - boursa-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    command: >
      sh -c "
        echo 'ðŸ”¥ Starting FastAPI with Hot Reload...' &&
        echo 'Source code mounted for development' &&
        export DOCKER_ENV=true &&
        
        # Wait for database to be ready
        sleep 5 &&
        
        # Start the FastAPI application
        poetry run python main.py
      "
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${API_PORT:-8000}/health"]
      interval: 30s
      timeout: 10s
      retries: 3

# Named volumes
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  backend_logs:
    driver: local
  poetry_cache:
    driver: local

# Networks
networks:
  boursa-network:
    driver: bridge
