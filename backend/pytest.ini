[pytest]
# Modern pytest 8.4.1 configuration for Clean Architecture + DI testing
testpaths = tests
pythonpath = src
python_files = test_*.py *_test.py
python_classes = Test* *Tests
python_functions = test_* should_*

# Native asyncio support (pytest 8.4.1 feature)
asyncio_mode = auto
asyncio_default_fixture_loop_scope = session

# Performance and development optimizations
addopts = 
    -v
    --tb=short
    --strict-config
    --strict-markers
    --maxfail=1
    --lf
    --ff
    --durations=10
    --no-header
    --disable-warnings
    # No more --ignore patterns - use markers instead

# Architecture-aligned markers for Clean Architecture
markers =
    # Performance categories
    fast: Tests < 100ms (unit tests)
    medium: Tests 100ms-1s (integration tests)
    slow: Tests > 1s (e2e/performance tests)
    
    # Architecture layers (Clean Architecture)
    domain: Domain layer tests (entities, value objects, domain services)
    application: Application layer tests (use cases, CQRS handlers)
    infrastructure: Infrastructure layer tests (repositories, external adapters)
    presentation: Presentation layer tests (controllers, API endpoints)
    
    # Test types by isolation level
    unit: Unit tests with complete mocking
    integration: Integration tests with real components
    e2e: End-to-end tests with full application stack
    
    # Dependencies and resources
    database: Tests requiring database connection
    redis: Tests requiring Redis connection
    external: Tests calling external services
    container: Tests using DI container
    
    # Business domain markers
    portfolio: Portfolio management tests
    investment: Investment-related tests
    user: User management tests
    auth: Authentication and authorization tests
    market_data: Market data and analysis tests
    
    # Feature area markers
    archiving: Data archiving tests
    intelligence: AI/ML intelligence tests
    analytics: Analytics and reporting tests
    notifications: Notification system tests
    integrations: Third-party integration tests
    
    # Quality markers
    smoke: Smoke tests for basic functionality
    regression: Regression tests for bug prevention
    wip: Work in progress tests (use during development)
    performance: Performance and load tests
    security: Security-focused tests

# Warnings configuration
filterwarnings =
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning
    ignore::sqlalchemy.exc.MovedIn20Warning
    ignore::sqlalchemy.exc.SAWarning  
    ignore::RuntimeWarning
    ignore:.*event loop.*:DeprecationWarning
    # Transform warnings to errors for quality
    error::UserWarning
    # Ignore specific test warnings
    ignore:.*unclosed.*:ResourceWarning
