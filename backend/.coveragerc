# Configuration Coverage.py pour BoursaVision
# ==========================================

[run]
# Fichiers source à analyser
source = src/

# Branches à inclure dans la couverture
branch = True

# Fichiers à inclure (patterns)
include = 
    src/*
    src/**/*

# Fichiers à exclure de l'analyse
omit = 
    # Tests
    tests/*
    test_*
    *_test.py
    
    # Configuration et scripts
    scripts/*
    migrations/*
    alembic/*
    
    # Fichiers générés
    */__pycache__/*
    */migrations/*
    */alembic/versions/*
    
    # Fichiers d'initialisation vides
    */__init__.py
    
    # Configuration
    */config.py
    */settings.py
    
    # Point d'entrée principal (souvent difficile à tester)
    src/main.py
    src/app.py
    
    # Environnement virtuel
    .venv/*
    venv/*

# Répertoire de données de couverture
data_file = .coverage

# Exécution parallèle
parallel = False

# Plugins
plugins = 

[report]
# Format du rapport dans le terminal
show_missing = True
skip_covered = False
skip_empty = False

# Précision des pourcentages
precision = 1

# Exclure les lignes avec ces commentaires
exclude_lines = 
    # Marqueurs standard de code non testé
    pragma: no cover
    
    # Défense contre les bugs - ne pas tester
    def __repr__
    if self.debug:
    if settings.DEBUG
    
    # Tests et développement
    if __name__ == .__main__.:
    if TYPE_CHECKING:
    
    # Exceptions qui ne devraient jamais arriver
    raise AssertionError
    raise NotImplementedError
    
    # Code de développement ou debug
    def debug
    logger.debug
    
    # Gestion d'erreurs système  
    except KeyboardInterrupt:
    except SystemExit:
    
    # Abstract methods
    @abstractmethod
    @abc.abstractmethod
    
    # Protocol methods (typing)
    \.\.\.

# Exclure aussi les lignes partiellement couvertes avec ces patterns
partial_branches = 
    pragma: no branch
    pragma: no cover

# Tri du rapport
sort = Cover

[html]
# Répertoire de sortie HTML
directory = htmlcov

# Titre du rapport
title = "BoursaVision Backend - Rapport de Couverture"

# Fichiers à mettre en évidence comme importants
show_contexts = True

# Skip files avec 100% de couverture dans le rapport HTML
skip_covered = False
skip_empty = True

[xml]
# Fichier de sortie XML (pour CI/CD)
output = coverage.xml

[json]
# Fichier de sortie JSON  
output = coverage.json
pretty_print = True
show_contexts = True

# Configuration des seuils de couverture par répertoire
[coverage:paths]
source = 
    src/
    */site-packages/

# Seuils de couverture par composant
[coverage:report:domains]
# Domaine Business (devrait avoir une couverture élevée)
src/boursa_vision/domain/ = 90

# Application Services (couverture importante)
src/boursa_vision/application/ = 80

# Infrastructure (plus difficile à tester, seuil plus bas)
src/boursa_vision/infrastructure/ = 70

# Interfaces/API (tests d'intégration principalement)
src/boursa_vision/interfaces/ = 60

# Configuration spéciale pour différents environnements
[coverage:run:development]
debug = file

[coverage:run:production] 
omit = 
    */test*
    */debug*
    */dev*

# Commentaires pour l'équipe
# 
# Objectifs de couverture par phase :
# Phase 1 (actuelle) : 25% minimum global
# Phase 2 : 50% minimum global  
# Phase 3 : 75% minimum global
# Phase 4 : 90% minimum global (sauf infrastructure à 70%)
#
# Priorités de couverture :
# 1. Domain entities et value objects (critique business)
# 2. Application use cases (logique métier)  
# 3. Domain services (règles business complexes)
# 4. Application mappers (transformation données)
# 5. Infrastructure repositories (accès données)
# 6. API controllers (points d'entrée)
#
# Fichiers pouvant avoir une couverture plus faible :
# - Configuration et settings
# - Migrations de base de données
# - Scripts utilitaires
# - Code de démarrage (main.py)
# - Modèles SQLAlchemy (principalement déclaratifs)
