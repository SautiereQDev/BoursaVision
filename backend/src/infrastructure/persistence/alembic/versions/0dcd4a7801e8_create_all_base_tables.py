"""Create all base tables

Revision ID: 0dcd4a7801e8
Revises: 001_timescaledb_setup
Create Date: 2025-08-11 16:04:06.089005

"""
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

from alembic import op

# revision identifiers, used by Alembic.
revision = "0dcd4a7801e8"
down_revision = "001_timescaledb_setup"
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "instruments",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("symbol", sa.String(length=20), nullable=False),
        sa.Column("name", sa.String(length=200), nullable=True),
        sa.Column("instrument_type", sa.String(length=20), nullable=False),
        sa.Column("exchange", sa.String(length=10), nullable=True),
        sa.Column("currency", sa.String(length=3), nullable=True),
        sa.Column("sector", sa.String(length=50), nullable=True),
        sa.Column("industry", sa.String(length=100), nullable=True),
        sa.Column("country", sa.String(length=2), nullable=True),
        sa.Column("isin", sa.String(length=12), nullable=True),
        sa.Column("description", sa.Text(), nullable=True),
        sa.Column("is_active", sa.Boolean(), nullable=True),
        sa.Column("created_at", sa.TIMESTAMP(), nullable=True),
        sa.Column("updated_at", sa.TIMESTAMP(), nullable=True),
        sa.CheckConstraint(
            "instrument_type IN ('stock', 'etf', 'bond', 'crypto', 'forex', 'commodity')",
            name="check_instrument_type",
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        "idx_instruments_active", "instruments", ["is_active"], unique=False
    )
    op.create_index("idx_instruments_symbol", "instruments", ["symbol"], unique=False)
    op.create_index(
        "idx_instruments_type", "instruments", ["instrument_type"], unique=False
    )
    op.create_index(
        op.f("ix_instruments_symbol"), "instruments", ["symbol"], unique=True
    )
    op.create_table(
        "investments",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("symbol", sa.String(length=20), nullable=False),
        sa.Column("name", sa.String(length=255), nullable=False),
        sa.Column("exchange", sa.String(length=50), nullable=False),
        sa.Column("sector", sa.String(length=100), nullable=True),
        sa.Column("industry", sa.String(length=100), nullable=True),
        sa.Column("market_cap", sa.Numeric(precision=20, scale=2), nullable=True),
        sa.Column("description", sa.Text(), nullable=True),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_investments_exchange"), "investments", ["exchange"], unique=False
    )
    op.create_index(
        op.f("ix_investments_sector"), "investments", ["sector"], unique=False
    )
    op.create_index(
        op.f("ix_investments_symbol"), "investments", ["symbol"], unique=True
    )
    op.create_table(
        "market_data",
        sa.Column("time", postgresql.TIMESTAMP(), nullable=False),
        sa.Column("symbol", sa.String(length=20), nullable=False),
        sa.Column("interval_type", sa.String(length=5), nullable=False),
        sa.Column("open_price", sa.Numeric(precision=15, scale=4), nullable=True),
        sa.Column("high_price", sa.Numeric(precision=15, scale=4), nullable=True),
        sa.Column("low_price", sa.Numeric(precision=15, scale=4), nullable=True),
        sa.Column("close_price", sa.Numeric(precision=15, scale=4), nullable=True),
        sa.Column("adjusted_close", sa.Numeric(precision=15, scale=4), nullable=True),
        sa.Column("volume", sa.BigInteger(), nullable=True),
        sa.Column("source", sa.String(length=20), nullable=True),
        sa.Column("created_at", postgresql.TIMESTAMP(), nullable=True),
        sa.PrimaryKeyConstraint("time", "symbol", "interval_type"),
    )
    op.create_index(
        "idx_market_data_interval",
        "market_data",
        ["interval_type", "time"],
        unique=False,
    )
    op.create_index(
        "idx_market_data_symbol_time", "market_data", ["symbol", "time"], unique=False
    )
    op.create_table(
        "performance",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("metric", sa.String(length=100), nullable=False),
        sa.Column("value", sa.Numeric(precision=15, scale=4), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "signals",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("time", postgresql.TIMESTAMP(), nullable=False),
        sa.Column("symbol", sa.String(length=20), nullable=False),
        sa.Column("signal_type", sa.String(length=10), nullable=False),
        sa.Column("strength", sa.String(length=10), nullable=False),
        sa.Column("confidence_score", sa.Numeric(precision=3, scale=2), nullable=False),
        sa.Column("price_target", sa.Numeric(precision=15, scale=4), nullable=True),
        sa.Column("stop_loss", sa.Numeric(precision=15, scale=4), nullable=True),
        sa.Column("rationale", sa.Text(), nullable=True),
        sa.Column("technical_score", sa.Numeric(precision=3, scale=2), nullable=True),
        sa.Column("fundamental_score", sa.Numeric(precision=3, scale=2), nullable=True),
        sa.Column(
            "market_context_score", sa.Numeric(precision=3, scale=2), nullable=True
        ),
        sa.Column(
            "indicators_used", postgresql.JSONB(astext_type=sa.Text()), nullable=True
        ),
        sa.Column(
            "signal_metadata", postgresql.JSONB(astext_type=sa.Text()), nullable=True
        ),
        sa.Column("is_active", sa.Boolean(), nullable=True),
        sa.Column("expires_at", postgresql.TIMESTAMP(), nullable=True),
        sa.Column("created_at", postgresql.TIMESTAMP(), nullable=True),
        sa.CheckConstraint(
            "signal_type IN ('BUY', 'SELL', 'HOLD')", name="check_signal_type"
        ),
        sa.CheckConstraint(
            "strength IN ('WEAK', 'MODERATE', 'STRONG')", name="check_strength"
        ),
        sa.CheckConstraint(
            "confidence_score BETWEEN 0.00 AND 1.00", name="check_confidence_score"
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        "idx_signals_active", "signals", ["is_active", "time"], unique=False
    )
    op.create_index(
        "idx_signals_symbol_time", "signals", ["symbol", "time"], unique=False
    )
    op.create_index(
        "idx_signals_type", "signals", ["signal_type", "time"], unique=False
    )
    op.create_index(op.f("ix_signals_time"), "signals", ["time"], unique=False)
    op.create_table(
        "technical_indicators",
        sa.Column("time", postgresql.TIMESTAMP(), nullable=False),
        sa.Column("symbol", sa.String(length=20), nullable=False),
        sa.Column("indicator_name", sa.String(length=30), nullable=False),
        sa.Column("timeframe", sa.String(length=5), nullable=False),
        sa.Column("value", sa.Numeric(precision=15, scale=6), nullable=True),
        sa.Column("value_secondary", sa.Numeric(precision=15, scale=6), nullable=True),
        sa.Column("value_tertiary", sa.Numeric(precision=15, scale=6), nullable=True),
        sa.Column("parameters", postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column("created_at", postgresql.TIMESTAMP(), nullable=True),
        sa.PrimaryKeyConstraint("time", "symbol", "indicator_name", "timeframe"),
    )
    op.create_table(
        "users",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("username", sa.String(length=100), nullable=False),
        sa.Column("email", sa.String(length=255), nullable=False),
        sa.Column("password_hash", sa.String(length=255), nullable=False),
        sa.Column("role", sa.String(length=20), nullable=False),
        sa.Column("first_name", sa.String(length=100), nullable=True),
        sa.Column("last_name", sa.String(length=100), nullable=True),
        sa.Column("phone", sa.String(length=20), nullable=True),
        sa.Column("date_of_birth", sa.Date(), nullable=True),
        sa.Column("country", sa.String(length=2), nullable=True),
        sa.Column("timezone", sa.String(length=50), nullable=True),
        sa.Column("language", sa.String(length=5), nullable=True),
        sa.Column("is_active", sa.Boolean(), nullable=True),
        sa.Column("is_verified", sa.Boolean(), nullable=True),
        sa.Column("risk_tolerance", sa.String(length=20), nullable=True),
        sa.Column("investment_experience", sa.String(length=20), nullable=False),
        sa.Column("created_at", sa.TIMESTAMP(timezone=True), nullable=True),
        sa.Column("updated_at", sa.TIMESTAMP(timezone=True), nullable=True),
        sa.Column("last_login_at", sa.TIMESTAMP(timezone=True), nullable=True),
        sa.CheckConstraint(
            "investment_experience IN ('beginner', 'intermediate', 'advanced')",
            name="check_investment_experience",
        ),
        sa.CheckConstraint(
            "risk_tolerance IN ('conservative', 'moderate', 'aggressive')",
            name="check_risk_tolerance",
        ),
        sa.CheckConstraint(
            "role IN ('ADMIN', 'TRADER', 'ANALYST', 'VIEWER')", name="check_user_role"
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_users_email"), "users", ["email"], unique=True)
    op.create_index(op.f("ix_users_is_active"), "users", ["is_active"], unique=False)
    op.create_index(op.f("ix_users_username"), "users", ["username"], unique=True)
    op.create_table(
        "audit_logs",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("user_id", sa.UUID(), nullable=True),
        sa.Column("action", sa.String(length=50), nullable=False),
        sa.Column("resource_type", sa.String(length=30), nullable=True),
        sa.Column("resource_id", sa.UUID(), nullable=True),
        sa.Column("old_values", postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column("new_values", postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column("ip_address", sa.String(length=45), nullable=True),
        sa.Column("user_agent", sa.Text(), nullable=True),
        sa.Column("success", sa.Boolean(), nullable=True),
        sa.Column("error_message", sa.Text(), nullable=True),
        sa.Column("created_at", postgresql.TIMESTAMP(), nullable=True),
        sa.ForeignKeyConstraint(["user_id"], ["users.id"], ondelete="SET NULL"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        "idx_audit_logs_action", "audit_logs", ["action", "created_at"], unique=False
    )
    op.create_index(
        "idx_audit_logs_user", "audit_logs", ["user_id", "created_at"], unique=False
    )
    op.create_table(
        "fundamental_data",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("instrument_id", sa.UUID(), nullable=False),
        sa.Column("symbol", sa.String(length=20), nullable=False),
        sa.Column("period_end_date", sa.Date(), nullable=False),
        sa.Column("period_type", sa.String(length=10), nullable=False),
        sa.Column("market_cap", sa.BigInteger(), nullable=True),
        sa.Column("enterprise_value", sa.BigInteger(), nullable=True),
        sa.Column("shares_outstanding", sa.BigInteger(), nullable=True),
        sa.Column("float_shares", sa.BigInteger(), nullable=True),
        sa.Column("pe_ratio", sa.Numeric(precision=8, scale=2), nullable=True),
        sa.Column("forward_pe", sa.Numeric(precision=8, scale=2), nullable=True),
        sa.Column("peg_ratio", sa.Numeric(precision=8, scale=2), nullable=True),
        sa.Column("price_to_book", sa.Numeric(precision=8, scale=2), nullable=True),
        sa.Column("price_to_sales", sa.Numeric(precision=8, scale=2), nullable=True),
        sa.Column(
            "enterprise_value_revenue", sa.Numeric(precision=8, scale=2), nullable=True
        ),
        sa.Column(
            "enterprise_value_ebitda", sa.Numeric(precision=8, scale=2), nullable=True
        ),
        sa.Column("profit_margin", sa.Numeric(precision=8, scale=4), nullable=True),
        sa.Column("operating_margin", sa.Numeric(precision=8, scale=4), nullable=True),
        sa.Column("return_on_assets", sa.Numeric(precision=8, scale=4), nullable=True),
        sa.Column("return_on_equity", sa.Numeric(precision=8, scale=4), nullable=True),
        sa.Column(
            "return_on_investment", sa.Numeric(precision=8, scale=4), nullable=True
        ),
        sa.Column("revenue_growth", sa.Numeric(precision=8, scale=4), nullable=True),
        sa.Column("earnings_growth", sa.Numeric(precision=8, scale=4), nullable=True),
        sa.Column(
            "earnings_growth_quarterly", sa.Numeric(precision=8, scale=4), nullable=True
        ),
        sa.Column("debt_to_equity", sa.Numeric(precision=8, scale=4), nullable=True),
        sa.Column("current_ratio", sa.Numeric(precision=8, scale=4), nullable=True),
        sa.Column("quick_ratio", sa.Numeric(precision=8, scale=4), nullable=True),
        sa.Column("dividend_yield", sa.Numeric(precision=8, scale=4), nullable=True),
        sa.Column("payout_ratio", sa.Numeric(precision=8, scale=4), nullable=True),
        sa.Column(
            "dividend_growth_5y", sa.Numeric(precision=8, scale=4), nullable=True
        ),
        sa.Column("beta", sa.Numeric(precision=8, scale=4), nullable=True),
        sa.Column("created_at", sa.TIMESTAMP(), nullable=True),
        sa.Column("updated_at", sa.TIMESTAMP(), nullable=True),
        sa.CheckConstraint(
            "period_type IN ('QUARTERLY', 'ANNUAL')", name="check_period_type"
        ),
        sa.ForeignKeyConstraint(
            ["instrument_id"],
            ["instruments.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint(
            "symbol", "period_end_date", "period_type", name="uq_fundamental_period"
        ),
    )
    op.create_index(
        "idx_fundamental_data_symbol",
        "fundamental_data",
        ["symbol", "period_end_date"],
        unique=False,
    )
    op.create_table(
        "portfolios",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("user_id", sa.UUID(), nullable=False),
        sa.Column("name", sa.String(length=100), nullable=False),
        sa.Column("description", sa.Text(), nullable=True),
        sa.Column("base_currency", sa.String(length=3), nullable=True),
        sa.Column("initial_cash", sa.Numeric(precision=15, scale=4), nullable=True),
        sa.Column("current_cash", sa.Numeric(precision=15, scale=4), nullable=True),
        sa.Column("total_invested", sa.Numeric(precision=15, scale=4), nullable=True),
        sa.Column("total_value", sa.Numeric(precision=15, scale=4), nullable=True),
        sa.Column("daily_pnl", sa.Numeric(precision=15, scale=4), nullable=True),
        sa.Column("total_pnl", sa.Numeric(precision=15, scale=4), nullable=True),
        sa.Column("daily_return_pct", sa.Numeric(precision=8, scale=4), nullable=True),
        sa.Column("total_return_pct", sa.Numeric(precision=8, scale=4), nullable=True),
        sa.Column("is_default", sa.Boolean(), nullable=True),
        sa.Column("is_active", sa.Boolean(), nullable=True),
        sa.Column("created_at", sa.TIMESTAMP(), nullable=True),
        sa.Column("updated_at", sa.TIMESTAMP(), nullable=True),
        sa.CheckConstraint(
            "base_currency IN ('USD', 'EUR', 'GBP', 'CAD', 'JPY')",
            name="check_base_currency",
        ),
        sa.ForeignKeyConstraint(["user_id"], ["users.id"], ondelete="SET NULL"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        "idx_portfolios_default", "portfolios", ["user_id", "is_default"], unique=False
    )
    op.create_index("idx_portfolios_user", "portfolios", ["user_id"], unique=False)
    op.create_table(
        "system_config",
        sa.Column("key", sa.String(length=100), nullable=False),
        sa.Column("value", postgresql.JSONB(astext_type=sa.Text()), nullable=False),
        sa.Column("description", sa.Text(), nullable=True),
        sa.Column("is_encrypted", sa.Boolean(), nullable=True),
        sa.Column("updated_by", sa.UUID(), nullable=True),
        sa.Column("updated_at", postgresql.TIMESTAMP(), nullable=True),
        sa.ForeignKeyConstraint(
            ["updated_by"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("key"),
    )
    op.create_index("idx_system_config_key", "system_config", ["key"], unique=False)
    op.create_table(
        "user_sessions",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("user_id", sa.UUID(), nullable=False),
        sa.Column("session_token", sa.String(length=255), nullable=False),
        sa.Column("refresh_token", sa.String(length=255), nullable=True),
        sa.Column("ip_address", sa.String(length=45), nullable=True),
        sa.Column("expires_at", sa.TIMESTAMP(timezone=True), nullable=False),
        sa.Column("created_at", sa.TIMESTAMP(timezone=True), nullable=True),
        sa.Column("last_activity_at", sa.TIMESTAMP(timezone=True), nullable=True),
        sa.ForeignKeyConstraint(["user_id"], ["users.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("refresh_token"),
        sa.UniqueConstraint("session_token"),
    )
    op.create_index(
        "idx_user_sessions_expires", "user_sessions", ["expires_at"], unique=False
    )
    op.create_index(
        "idx_user_sessions_token", "user_sessions", ["session_token"], unique=False
    )
    op.create_index(
        "idx_user_sessions_user", "user_sessions", ["user_id"], unique=False
    )
    op.create_table(
        "alerts",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("user_id", sa.UUID(), nullable=True),
        sa.Column("portfolio_id", sa.UUID(), nullable=True),
        sa.Column("symbol", sa.String(length=20), nullable=True),
        sa.Column("alert_type", sa.String(length=20), nullable=False),
        sa.Column("condition_type", sa.String(length=10), nullable=False),
        sa.Column("threshold_value", sa.Numeric(precision=15, scale=4), nullable=True),
        sa.Column(
            "threshold_percentage", sa.Numeric(precision=5, scale=2), nullable=True
        ),
        sa.Column("current_value", sa.Numeric(precision=15, scale=4), nullable=True),
        sa.Column("message_template", sa.Text(), nullable=True),
        sa.Column(
            "notification_methods",
            postgresql.JSONB(astext_type=sa.Text()),
            nullable=True,
        ),
        sa.Column("is_active", sa.Boolean(), nullable=True),
        sa.Column("is_triggered", sa.Boolean(), nullable=True),
        sa.Column("trigger_count", sa.Integer(), nullable=True),
        sa.Column("last_triggered_at", postgresql.TIMESTAMP(), nullable=True),
        sa.Column("title", sa.String(length=255), nullable=True),
        sa.Column("description", sa.Text(), nullable=True),
        sa.Column("created_at", sa.TIMESTAMP(), nullable=True),
        sa.Column("updated_at", sa.TIMESTAMP(), nullable=True),
        sa.CheckConstraint(
            "alert_type IN ('PRICE', 'VOLUME', 'SIGNAL', 'PORTFOLIO')",
            name="check_alert_type",
        ),
        sa.CheckConstraint(
            "condition_type IN ('ABOVE', 'BELOW', 'EQUALS', 'CHANGE_PCT')",
            name="check_condition_type",
        ),
        sa.ForeignKeyConstraint(
            ["portfolio_id"], ["portfolios.id"], ondelete="SET NULL"
        ),
        sa.ForeignKeyConstraint(["user_id"], ["users.id"], ondelete="SET NULL"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index("idx_alerts_active", "alerts", ["is_active"], unique=False)
    op.create_index("idx_alerts_symbol", "alerts", ["symbol"], unique=False)
    op.create_index("idx_alerts_user", "alerts", ["user_id"], unique=False)
    op.create_table(
        "portfolio_performance",
        sa.Column("time", postgresql.TIMESTAMP(), nullable=False),
        sa.Column("portfolio_id", sa.UUID(), nullable=False),
        sa.Column("total_value", sa.Numeric(precision=15, scale=4), nullable=False),
        sa.Column("cash_value", sa.Numeric(precision=15, scale=4), nullable=False),
        sa.Column("invested_value", sa.Numeric(precision=15, scale=4), nullable=False),
        sa.Column("daily_return", sa.Numeric(precision=8, scale=4), nullable=True),
        sa.Column("weekly_return", sa.Numeric(precision=8, scale=4), nullable=True),
        sa.Column("monthly_return", sa.Numeric(precision=8, scale=4), nullable=True),
        sa.Column("yearly_return", sa.Numeric(precision=8, scale=4), nullable=True),
        sa.Column("inception_return", sa.Numeric(precision=8, scale=4), nullable=True),
        sa.Column("volatility_30d", sa.Numeric(precision=8, scale=4), nullable=True),
        sa.Column("sharpe_ratio_30d", sa.Numeric(precision=8, scale=4), nullable=True),
        sa.Column("max_drawdown_30d", sa.Numeric(precision=8, scale=4), nullable=True),
        sa.Column("beta_30d", sa.Numeric(precision=8, scale=4), nullable=True),
        sa.Column("alpha_30d", sa.Numeric(precision=8, scale=4), nullable=True),
        sa.Column("number_of_positions", sa.Integer(), nullable=True),
        sa.Column(
            "largest_position_pct", sa.Numeric(precision=5, scale=2), nullable=True
        ),
        sa.Column(
            "sector_concentration", sa.Numeric(precision=5, scale=2), nullable=True
        ),
        sa.Column("created_at", postgresql.TIMESTAMP(), nullable=True),
        sa.ForeignKeyConstraint(
            ["portfolio_id"], ["portfolios.id"], ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("time", "portfolio_id"),
    )
    op.create_index(
        "idx_portfolio_performance_portfolio_time",
        "portfolio_performance",
        ["portfolio_id", "time"],
        unique=False,
    )
    op.create_table(
        "positions",
        sa.Column("quantity", sa.Numeric(precision=15, scale=8), nullable=False),
        sa.Column("average_price", sa.Numeric(precision=15, scale=4), nullable=False),
        sa.Column("market_price", sa.Numeric(precision=15, scale=4), nullable=True),
        sa.Column("market_value", sa.Numeric(precision=15, scale=4), nullable=True),
        sa.Column("book_value", sa.Numeric(precision=15, scale=4), nullable=True),
        sa.Column("unrealized_pnl", sa.Numeric(precision=15, scale=4), nullable=True),
        sa.Column(
            "unrealized_pnl_pct", sa.Numeric(precision=8, scale=4), nullable=True
        ),
        sa.Column("realized_pnl", sa.Numeric(precision=15, scale=4), nullable=True),
        sa.Column("weight_pct", sa.Numeric(precision=5, scale=2), nullable=True),
        sa.Column("first_purchase_date", postgresql.TIMESTAMP(), nullable=True),
        sa.Column("last_transaction_date", postgresql.TIMESTAMP(), nullable=True),
        sa.Column("is_active", sa.Boolean(), nullable=True),
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("portfolio_id", sa.UUID(), nullable=False),
        sa.Column("instrument_id", sa.UUID(), nullable=False),
        sa.Column("symbol", sa.String(length=20), nullable=False),
        sa.Column("created_at", sa.TIMESTAMP(), nullable=True),
        sa.Column("updated_at", sa.TIMESTAMP(), nullable=True),
        sa.ForeignKeyConstraint(
            ["instrument_id"],
            ["instruments.id"],
        ),
        sa.ForeignKeyConstraint(
            ["portfolio_id"], ["portfolios.id"], ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("portfolio_id", "symbol", name="uq_portfolio_symbol"),
    )
    op.create_index("idx_positions_active", "positions", ["is_active"], unique=False)
    op.create_index(
        "idx_positions_portfolio", "positions", ["portfolio_id"], unique=False
    )
    op.create_index("idx_positions_symbol", "positions", ["symbol"], unique=False)
    op.create_table(
        "transactions",
        sa.Column("transaction_type", sa.String(length=10), nullable=False),
        sa.Column("quantity", sa.Numeric(precision=15, scale=8), nullable=False),
        sa.Column("price", sa.Numeric(precision=15, scale=4), nullable=False),
        sa.Column("amount", sa.Numeric(precision=15, scale=4), nullable=False),
        sa.Column("fees", sa.Numeric(precision=15, scale=4), nullable=True),
        sa.Column("taxes", sa.Numeric(precision=15, scale=4), nullable=True),
        sa.Column("net_amount", sa.Numeric(precision=15, scale=4), nullable=False),
        sa.Column("currency", sa.String(length=3), nullable=False),
        sa.Column("exchange_rate", sa.Numeric(precision=10, scale=6), nullable=True),
        sa.Column("notes", sa.Text(), nullable=True),
        sa.Column("external_id", sa.String(length=100), nullable=True),
        sa.Column("executed_at", postgresql.TIMESTAMP(), nullable=False),
        sa.Column("created_at", postgresql.TIMESTAMP(), nullable=True),
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("portfolio_id", sa.UUID(), nullable=False),
        sa.Column("instrument_id", sa.UUID(), nullable=False),
        sa.Column("symbol", sa.String(length=20), nullable=False),
        sa.CheckConstraint(
            "transaction_type IN ('BUY', 'SELL', 'DIVIDEND', 'SPLIT', 'SPIN_OFF')",
            name="check_transaction_type",
        ),
        sa.ForeignKeyConstraint(
            ["instrument_id"],
            ["instruments.id"],
        ),
        sa.ForeignKeyConstraint(
            ["portfolio_id"], ["portfolios.id"], ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        "idx_transactions_date", "transactions", ["executed_at"], unique=False
    )
    op.create_index(
        "idx_transactions_portfolio", "transactions", ["portfolio_id"], unique=False
    )
    op.create_index("idx_transactions_symbol", "transactions", ["symbol"], unique=False)
    op.create_index(
        "idx_transactions_type", "transactions", ["transaction_type"], unique=False
    )
    op.create_table(
        "notifications",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("user_id", sa.UUID(), nullable=True),
        sa.Column("alert_id", sa.UUID(), nullable=True),
        sa.Column("type", sa.String(length=20), nullable=False),
        sa.Column("title", sa.String(length=200), nullable=False),
        sa.Column("message", sa.Text(), nullable=False),
        sa.Column("data", postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column("channels", postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column("is_read", sa.Boolean(), nullable=True),
        sa.Column("read_at", postgresql.TIMESTAMP(), nullable=True),
        sa.Column("sent_at", postgresql.TIMESTAMP(), nullable=True),
        sa.Column("created_at", postgresql.TIMESTAMP(), nullable=True),
        sa.CheckConstraint(
            "type IN ('ALERT', 'SIGNAL', 'SYSTEM', 'MARKETING')",
            name="check_notification_type",
        ),
        sa.ForeignKeyConstraint(["alert_id"], ["alerts.id"], ondelete="SET NULL"),
        sa.ForeignKeyConstraint(["user_id"], ["users.id"], ondelete="SET NULL"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        "idx_notifications_unread",
        "notifications",
        ["user_id", "is_read"],
        unique=False,
    )
    op.create_index(
        "idx_notifications_user", "notifications", ["user_id"], unique=False
    )
    op.drop_index(
        op.f("market_data_test_symbol_time_idx"), table_name="market_data_test"
    )
    op.drop_index(op.f("market_data_test_time_idx"), table_name="market_data_test")
    op.drop_table("market_data_test")
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "market_data_test",
        sa.Column(
            "time",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("symbol", sa.TEXT(), autoincrement=False, nullable=False),
        sa.Column(
            "price",
            sa.NUMERIC(precision=12, scale=2),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("volume", sa.BIGINT(), autoincrement=False, nullable=True),
    )
    op.create_index(
        op.f("market_data_test_time_idx"),
        "market_data_test",
        [sa.literal_column("time DESC")],
        unique=False,
    )
    op.create_index(
        op.f("market_data_test_symbol_time_idx"),
        "market_data_test",
        ["symbol", sa.literal_column("time DESC")],
        unique=False,
    )
    op.drop_index("idx_notifications_user", table_name="notifications")
    op.drop_index("idx_notifications_unread", table_name="notifications")
    op.drop_table("notifications")
    op.drop_index("idx_transactions_type", table_name="transactions")
    op.drop_index("idx_transactions_symbol", table_name="transactions")
    op.drop_index("idx_transactions_portfolio", table_name="transactions")
    op.drop_index("idx_transactions_date", table_name="transactions")
    op.drop_table("transactions")
    op.drop_index("idx_positions_symbol", table_name="positions")
    op.drop_index("idx_positions_portfolio", table_name="positions")
    op.drop_index("idx_positions_active", table_name="positions")
    op.drop_table("positions")
    op.drop_index(
        "idx_portfolio_performance_portfolio_time", table_name="portfolio_performance"
    )
    op.drop_table("portfolio_performance")
    op.drop_index("idx_alerts_user", table_name="alerts")
    op.drop_index("idx_alerts_symbol", table_name="alerts")
    op.drop_index("idx_alerts_active", table_name="alerts")
    op.drop_table("alerts")
    op.drop_index("idx_user_sessions_user", table_name="user_sessions")
    op.drop_index("idx_user_sessions_token", table_name="user_sessions")
    op.drop_index("idx_user_sessions_expires", table_name="user_sessions")
    op.drop_table("user_sessions")
    op.drop_index("idx_system_config_key", table_name="system_config")
    op.drop_table("system_config")
    op.drop_index("idx_portfolios_user", table_name="portfolios")
    op.drop_index("idx_portfolios_default", table_name="portfolios")
    op.drop_table("portfolios")
    op.drop_index("idx_fundamental_data_symbol", table_name="fundamental_data")
    op.drop_table("fundamental_data")
    op.drop_index("idx_audit_logs_user", table_name="audit_logs")
    op.drop_index("idx_audit_logs_action", table_name="audit_logs")
    op.drop_table("audit_logs")
    op.drop_index(op.f("ix_users_username"), table_name="users")
    op.drop_index(op.f("ix_users_is_active"), table_name="users")
    op.drop_index(op.f("ix_users_email"), table_name="users")
    op.drop_table("users")
    op.drop_table("technical_indicators")
    op.drop_index(op.f("ix_signals_time"), table_name="signals")
    op.drop_index("idx_signals_type", table_name="signals")
    op.drop_index("idx_signals_symbol_time", table_name="signals")
    op.drop_index("idx_signals_active", table_name="signals")
    op.drop_table("signals")
    op.drop_table("performance")
    op.drop_index("idx_market_data_symbol_time", table_name="market_data")
    op.drop_index("idx_market_data_interval", table_name="market_data")
    op.drop_table("market_data")
    op.drop_index(op.f("ix_investments_symbol"), table_name="investments")
    op.drop_index(op.f("ix_investments_sector"), table_name="investments")
    op.drop_index(op.f("ix_investments_exchange"), table_name="investments")
    op.drop_table("investments")
    op.drop_index(op.f("ix_instruments_symbol"), table_name="instruments")
    op.drop_index("idx_instruments_type", table_name="instruments")
    op.drop_index("idx_instruments_symbol", table_name="instruments")
    op.drop_index("idx_instruments_active", table_name="instruments")
    op.drop_table("instruments")
    # ### end Alembic commands ###
